{"version":3,"sources":["Components/Layout/GameSetting.module.scss","Components/Card/Card.module.scss","Components/Card/AnswerCard.module.scss","Components/Layout/Header.module.css","Components/UI/Board.module.css","Components/UI/Button.module.scss","Components/Layout/Header.js","store/array.js","Components/Card/Card.js","Components/UI/Board.js","Components/Card/AnswerCard.js","Components/UI/Input.js","Components/UI/Button.js","Components/Layout/GameSetting.js","Components/UI/Game.js","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["module","exports","Header","className","classes","header","stringToArray","value","split","arraySlice","createSlice","name","initialState","stringSetting","cardStringArray","arrayDetail","matchingArray","completed","answer","reducers","Match","state","action","push","payload","length","content","id","isMatched","console","log","assignNewString","array","randomIndex","currentIndex","Math","floor","random","arrayWithKey","index","shuffle","arrayActions","actions","Card","props","useState","isFreezed","setIsFreezed","cardClass","card","faceup","text","dispatch","useDispatch","FreezeCounter","setTimeout","onResetFreezeCounterHandler","onClick","onFreezeCounterHandler","Transition","in","timeout","mountOnEnter","unmountOnExit","textCenter","style","opacity","Board","boardContainer","children","AnswerCard","answerCard","Input","Button","button","type","GameSetting","inputRef","useRef","aria-hidden","xlinkHref","href","placeholder","ref","current","onStartGame","xmlns","viewBox","fill","d","x","y","width","height","rx","ry","Game","freezeCounter","setFreezeCounter","FreezeCounterHandler","ResetFreezeCounterHandler","startGame","setStartGame","Fragment","map","item","App","useSelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","arrayReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e711f50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"GameSetting_card__1JmRV\",\"card--inverted\":\"GameSetting_card--inverted__1L5Vb\",\"card--accent\":\"GameSetting_card--accent__24MpF\",\"h2Space\":\"GameSetting_h2Space__C-yGS\",\"l-design-width\":\"GameSetting_l-design-width__3fKhP\",\"input\":\"GameSetting_input__1nRK-\",\"input__label\":\"GameSetting_input__label__14Mig\",\"input__field\":\"GameSetting_input__field__1djPe\",\"button-group\":\"GameSetting_button-group__2Oeij\",\"icon\":\"GameSetting_icon__3l5Mq\",\"hidden\":\"GameSetting_hidden__kdgU5\",\"form\":\"GameSetting_form__2LS-s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3YReZ\",\"faceup\":\"Card_faceup__3IWZH\",\"textCenter\":\"Card_textCenter__1Wo6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerCard\":\"AnswerCard_answerCard__KHAWf\",\"textCenter\":\"AnswerCard_textCenter__2L0Yt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3OWFP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardContainer\":\"Board_boardContainer__3D6TJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1X4LN\"};","import classes from \"./Header.module.css\";\r\n\r\nfunction Header() {\r\n  return <h1 className={classes.header}>Memory</h1>;\r\n}\r\n\r\nexport default Header;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n//const cardString = \"You Are Only A Piece Of Shit ðŸ¤Ž\";\r\n//const cardStringArray = (cardString + \" \" + cardString).split(\" \");\r\n\r\nfunction stringToArray(value) {\r\n  var twoString = value + \" \" + value;\r\n  return twoString.split(\" \");\r\n}\r\n//const importArray = shuffle(cardStringArray);\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  const arrayWithKey = [];\r\n  for (let index = 0; index < array.length; index++) {\r\n    arrayWithKey.push({\r\n      content: array[index],\r\n      id: index,\r\n      isMatched: false,\r\n    });\r\n  }\r\n  return arrayWithKey;\r\n}\r\n\r\nconst initialArrayState = {\r\n  stringSetting: \"\",\r\n  cardStringArray: \"\",\r\n  arrayDetail: \"\",\r\n  matchingArray: [],\r\n  completed: 0,\r\n  answer: \"\",\r\n};\r\n\r\nconst arraySlice = createSlice({\r\n  name: \"arrayMatching\",\r\n  initialState: initialArrayState,\r\n  reducers: {\r\n    Match(state, action) {\r\n      state.matchingArray.push(action.payload);\r\n      if (state.matchingArray.length === 2) {\r\n        if (state.matchingArray[0].content === state.matchingArray[1].content) {\r\n          state.arrayDetail[state.matchingArray[0].id].isMatched = true;\r\n          state.arrayDetail[state.matchingArray[1].id].isMatched = true;\r\n          state.completed += 2;\r\n          if (state.completed === state.cardStringArray.length) {\r\n            state.answer = state.stringSetting;\r\n            console.log(\"finish\");\r\n            console.log(state.answer);\r\n          }\r\n          console.log(\"ok\");\r\n        } else {\r\n          state.arrayDetail[state.matchingArray[0].id].isMatched = false;\r\n          state.arrayDetail[state.matchingArray[1].id].isMatched = false;\r\n          console.log(\"removeBoth\");\r\n        }\r\n        state.matchingArray = [];\r\n      } else {\r\n        // state.arrayDetail[action.payload.id].isMatched = true;\r\n      }\r\n    },\r\n    assignNewString(state, action) {\r\n      state.stringSetting = action.payload;\r\n      state.cardStringArray = stringToArray(action.payload);\r\n      state.arrayDetail = shuffle(stringToArray(action.payload));\r\n    },\r\n    // test(state) {\r\n    //   state.testState = \"1\";\r\n    //   console.log(\"test\");\r\n    //   console.log(state.testState);\r\n    //   state.testState = \"2\";\r\n    //   console.log(state.testState);\r\n    // },\r\n  },\r\n});\r\n\r\nexport const arrayActions = arraySlice.actions;\r\n\r\nexport default arraySlice.reducer;\r\n","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Transition } from \"react-transition-group\";\r\nimport { arrayActions } from \"../../store/array\";\r\nimport classes from \"./Card.module.scss\";\r\n\r\nfunction Card(props) {\r\n  const [isFreezed, setIsFreezed] = useState(false);\r\n  // console.log(props.FreezeCounter);\r\n  // if (props.FreezeCounter === 2) {\r\n  //   props.FreezeCounterHandler();\r\n  //   setIsFreezed(true);\r\n  // }\r\n  const cardClass = `${classes.card} ${\r\n    props.isMatched || isFreezed ? classes.faceup : \"\"\r\n  }`;\r\n  let content = props.isMatched || isFreezed ? props.text : \"\";\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const cardHandler = () => {\r\n    console.log(`${props.FreezeCounter}before click`);\r\n    if (props.isMatched || isFreezed || props.FreezeCounter > 1) {\r\n    } else {\r\n      props.onFreezeCounterHandler();\r\n      setIsFreezed(true);\r\n      dispatch(arrayActions.Match({ content: props.text, id: props.id }));\r\n    }\r\n  };\r\n\r\n  if (props.FreezeCounter >= 2) {\r\n    setTimeout(function () {\r\n      props.onResetFreezeCounterHandler();\r\n      setIsFreezed(false);\r\n      console.log(\"readytorest\");\r\n    }, 2000);\r\n  }\r\n\r\n  return (\r\n    <div className={cardClass} onClick={cardHandler}>\r\n      <Transition\r\n        in={props.isMatched || isFreezed}\r\n        timeout={1000}\r\n        mountOnEnter\r\n        unmountOnExit\r\n      >\r\n        {(state) => (\r\n          <span\r\n            className={classes.textCenter}\r\n            style={{\r\n              opacity: state === \"entered\" ? 1 : 0,\r\n            }}\r\n          >\r\n            {content}\r\n          </span>\r\n        )}\r\n      </Transition>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import classes from \"./Board.module.css\";\r\n\r\nfunction Board(props) {\r\n  return <div className={classes.boardContainer}>{props.children}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import classes from \"./AnswerCard.module.scss\";\r\n\r\nfunction AnswerCard(props) {\r\n  return (\r\n    <div className={classes.answerCard}>\r\n      <span className={classes.textCenter}>{props.answer}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnswerCard;\r\n","import classes from \"./Input.module.scss\";\r\n\r\nfunction Input(props) {\r\n  return <input value={props.value} className={classes.input} />;\r\n}\r\n\r\nexport default Input;\r\n","import classes from \"./Button.module.scss\";\r\n\r\nfunction Button(props) {\r\n  const clickHandler = () => {\r\n    props.onClick();\r\n  };\r\n  return (\r\n    <button className={classes.button} type={props.type} onClick={clickHandler}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import classes from \"./GameSetting.module.scss\";\r\nimport Input from \"../UI/Input\";\r\nimport Button from \"../UI/Button\";\r\nimport React, { Fragment, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { arrayActions } from \"../../store/array\";\r\n\r\nfunction GameSetting(props) {\r\n  const inputRef = useRef();\r\n  const dispatch = useDispatch();\r\n  const stringSettingHandler = () => {\r\n    if (inputRef.current.value !== \"\") {\r\n      dispatch(arrayActions.assignNewString(inputRef.current.value));\r\n      props.onStartGame();\r\n    }\r\n  };\r\n\r\n  const resetHandler = () => {};\r\n  return (\r\n    <Fragment>\r\n      <form className={`${classes[\"form\"]}`}>\r\n        <article className={`${classes[\"l-design-width\"]}`}>\r\n          <div className={`${classes[\"card\"]} ${classes[\"card--accent\"]}`}>\r\n            <h2 className={`${classes[\"h2Space\"]}`}>\r\n              <svg className={`${classes[\"icon\"]}`} aria-hidden=\"true\">\r\n                <use xlinkHref=\"#icon-coffee\" href=\"#icon-coffee\" />\r\n              </svg>\r\n              CafÃ© con leche\r\n            </h2>\r\n            <label className={`${classes[\"input\"]}`}>\r\n              <input\r\n                className={`${classes[\"input__field\"]}`}\r\n                type=\"text\"\r\n                placeholder=\" \"\r\n                ref={inputRef}\r\n              />\r\n              <span className={`${classes[\"input__label\"]}`}>\r\n                Watermelon sugar high !!\r\n              </span>\r\n            </label>\r\n\r\n            <div className={`${classes[\"button-group\"]}`}>\r\n              <Button onClick={stringSettingHandler}>Send</Button>\r\n              <Button type=\"reset\" onClick={resetHandler}>\r\n                Reset\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </article>\r\n\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className={`${classes[\"hidden\"]}`}\r\n        >\r\n          <symbol id=\"icon-coffee\" viewBox=\"0 0 20 20\">\r\n            <title>icon-coffee</title>\r\n            <path\r\n              fill=\"currentColor\"\r\n              d=\"M15,17H14V9h3a3,3,0,0,1,3,3h0A5,5,0,0,1,15,17Zm1-6v3.83A3,3,0,0,0,18,12a1,1,0,0,0-1-1Z\"\r\n            />\r\n            <rect\r\n              fill=\"currentColor\"\r\n              x=\"1\"\r\n              y=\"7\"\r\n              width=\"15\"\r\n              height=\"12\"\r\n              rx=\"3\"\r\n              ry=\"3\"\r\n            />\r\n            <path\r\n              fill=\"var(--color-accent)\"\r\n              d=\"M7.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,0,1-1.79.89Z\"\r\n            />\r\n            <path\r\n              fill=\"var(--color-accent)\"\r\n              d=\"M3.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z\"\r\n            />\r\n            <path\r\n              fill=\"var(--color-accent)\"\r\n              d=\"M11.07,5.42a5.45,5.45,0,0,1,0-4.85,1,1,0,0,1,1.79.89,3.44,3.44,0,0,0,0,3.06,1,1,0,1,1-1.79.89Z\"\r\n            />\r\n          </symbol>\r\n        </svg>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default GameSetting;\r\n","import Header from \"../Layout/Header\";\r\nimport Card from \"../Card/Card\";\r\nimport Board from \"../UI/Board\";\r\nimport React, { useState } from \"react\";\r\nimport AnswerCard from \"../Card/AnswerCard\";\r\nimport GameSetting from \"../Layout/GameSetting\";\r\n\r\nfunction Game(props) {\r\n  let [freezeCounter, setFreezeCounter] = useState(0);\r\n  const FreezeCounterHandler = () => {\r\n    setFreezeCounter(++freezeCounter);\r\n    console.log(\"FreezeCounterHandler++\");\r\n  };\r\n\r\n  console.log(freezeCounter);\r\n  const ResetFreezeCounterHandler = () => {\r\n    setFreezeCounter(0);\r\n    console.log(\"ResetFreezeCounter=0\");\r\n  };\r\n\r\n  const [startGame, setStartGame] = useState(false);\r\n  const startGameHandler = () => {\r\n    setStartGame(true);\r\n  };\r\n  // const [test, setTest] = useState(false);\r\n  // const testHandler = () => {\r\n  //   setTest((v) => !v);\r\n  // };\r\n  // console.log(test);\r\n  return (\r\n    <React.Fragment>\r\n      {/* <button onClick={testHandler}></button> */}\r\n      <Header />\r\n      {!startGame && (\r\n        <Board>\r\n          <GameSetting\r\n            onStartGame={startGameHandler}\r\n            stringSetting={props.array.stringSetting}\r\n          />\r\n        </Board>\r\n      )}\r\n      {startGame && (\r\n        <Board>\r\n          {props.array.arrayDetail.map((item) => (\r\n            <Card\r\n              text={item.content}\r\n              key={item.id}\r\n              id={item.id}\r\n              isMatched={item.isMatched}\r\n              onFreezeCounterHandler={FreezeCounterHandler}\r\n              FreezeCounter={freezeCounter}\r\n              onResetFreezeCounterHandler={ResetFreezeCounterHandler}\r\n            ></Card>\r\n          ))}\r\n          {!!props.array.answer && <AnswerCard answer={props.array.answer} />}\r\n        </Board>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","// import { useDispatch } from \"react-redux\";\r\n// import { arrayActions } from \"./store/array\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Game from \"./Components/UI/Game\";\r\n\r\nfunction App() {\r\n  const array = useSelector((state) => state.array);\r\n\r\n  return <Game array={array} />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport arrayReducer from \"./array\";\r\n\r\nconst store = configureStore({\r\n  reducer: { array: arrayReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n//</React.StrictMode>\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}